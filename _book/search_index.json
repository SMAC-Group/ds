[
["rmarkdown.html", "Chapter 8 RMarkdown 8.1 YAML Metadata 8.2 Text 8.3 Code Chunks 8.4 Render Output", " Chapter 8 RMarkdown RMarkdown is a framework that provides a literate programming format for data science. It can be used to save and execute R code within RStudio, and also is a simple formatting syntax for authoring HTML, PDF, ODT, RTF, and MS Word documents. JUSTIN: maybe we should add something on what literate programming is? Also, I think we should add something on reproducible analysis (research). Basically, RMarkdown offers a simple tool that allows to create rapports or presentation slides in a reproducible manner. At a higher level this means reproducible research which is a real problem now a days. Also, literate programming tools such as RMarkdown avoids repetitive tasks such changing all figures when new data are available. It could be nice to add a sketch to show what is going in RMarkdown (maybe data -&gt; RMarkdown -&gt; output, under RMarkdown show that data importation/cleaning, analysis, writing slide/repport content is done, output show the kind of output, from slides, html, this book, latex document (sweave) and so on). Finally, we could add a video somewhere in the intro to present RMarkdown in RStudio. What do you think? An RMarkdown is a plain text file that contains three different aspects: YAML metadata Text Code Chunks 8.1 YAML Metadata YAML stands for YAML Ain’t Markup Language, and is used to specify document configurations and properties such as name, date, output format, etc. The (optional) YAML header surrounded by —s. You can also include additional formatting options, such as a table of contents, or even custom CSS which can utilized to further enhance presentation. For the purpose of the class, the default options should be sufficient. Below is an example knit output of the above RMarkdown file. The default output above is an html_document format. However, this can be specified as well, such as pdf_document. Before, you must install a TeX distribution such as MikTeX. You can also include raw LaTeX and even define LaTeX macros. 8.1.1 Subsections To make your sections numbered as sections and subsections, make sure you specify number_sections: yes as part of YAML Metadata. 8.2 Text JUSTIN wouldn’t it make more sense to move some subsections like tables, bullet points (if we keep it) in this section? To me they are move “text” than “code”. What do you think? Up to you of course! In addition, due to its literate nature, text will be an essential part in explaining your analysis. With RMarkdown, we can specify custom text formatting, such as with emphasis such as italics, bold, or even a code style. To understand how to format text, our previous would be as follows in RMarkdown: [...] such as with emphasis such as *italics*, **bold**, or even a `code style`. Headings are preceded with a #, breaks create a new paragraph. There are many more elements to creating a useful report using RMarkdown, and we encourage you to use the Rmarkdown Cheatsheet as a reference. 8.3 Code Chunks This is where you enter your code. You can quickly insert chunks like these into your file with the keyboard shortcut Ctrl + Alt + I (OS X: Cmd + Option + I) the Add Chunk command in the editor toolbar by typing the chunk delimiters {r} and. 8.3.1 Code Chunk Options Like third code chunk above, we can also set up chunk options. Note that the echo = FALSE parameter was added to the code chunk to prevent printing of the R code that generated the plot. This is a useful way to embed figures. More options can be referred from the Rmarkdown Cheatsheet and Yihui’s notes on knitr options. Here are some explanations of the most commonly used chunk options exerted from above: eval: (TRUE; logical) whether to evaluate the code chunk echo: (TRUE; logical or numeric) whether to include R source code in the output file warning: (TRUE; logical) whether to preserve warnings (produced by warning()) in the output like we run R code in a terminal (if FALSE, all warnings will be printed in the console instead of the output document) cache: (FALSE; logical) whether to cache a code chunk; Plot figure options: fig.path: (‘figure/’; character) prefix to be used for figure filenames (fig.path and chunk labels are concatenated to make filenames) fig.keep: (‘high’; character) how plots in chunks should be kept fig.show: (‘asis’; character) how to show/arrange the plots fig.width, fig.height: (both are 7; numeric) width and height of the plot, to be used in the graphics device (in inches) and have to be numeric fig.align: (‘default’; character) alignment of figures in the output document (possible values are left, right and center 8.3.2 Hyperlinks Justin: Maybe something on hyperlinks 8.3.3 Cache Justin: Maybe something on caching For example: a = 2 (d = 2*a) ## [1] 4 8.3.4 In-line R Justin: a = 2 The value of \\(a\\) is 2. 8.3.5 LaTeX Equations JUSTIN: maybe add something on what is latex? WHat do you think? Within the text section, you can also include LaTeX format to output equation format. Inline mathematical expressions can be added using the syntax: $math expression$. For example, if we want to write: “where \\(\\alpha\\) is in degrees” we would write: &quot;where $\\alpha$ is in degres&quot; Using a slightly different syntax (i.e. $$math expression$$) centered mathematical expressions can be obtained. For example, the binomial probability in LaTeX $$f(y|N,p) = \\frac{N!}{y!(N-y)!}\\cdot p^y \\cdot (1-p)^{N-y} = {{N}\\choose{y}} \\cdot p^y \\cdot (1-p)^{N-y}$$ converts to… \\[f(y|N,p) = \\frac{N!}{y!(N-y)!}\\cdot p^y \\cdot (1-p)^{N-y} = {{N}\\choose{y}} \\cdot p^y \\cdot (1-p)^{N-y}\\] A basic introduction to LaTeX format can be found here if you want to learn more about the basics. An alternative can be to insert custom LaTeX formulas using a graphical interface such as codecogs. 8.3.6 Cross-referencing Sections You can also use the same syntax \\@ref(label) to reference sections, where label is the section ID. By default, Pandoc will generate IDs for all section headers, e.g., # Hello World will have an ID hello-world. To call header hello-world as a header, we type \\@ref(hello-world) to cross-reference the section. In order to avoid forgetting to update the reference label after you change the section header, you may also manually assign an ID to a section header by appending {#id} to it. 8.3.7 Bullet points Justin what do you think about saying something about bullet points? If so feel to move it where you want… 8.3.8 Citations Same thing for citation… What do you think? blabla, someone 8.3.9 Bibliography JUSTIN I think it would be cool to add something on bibliography. When I reviewed James slides for STAT 385 I suggested to to show student how bib files can be imported directely from google scholar so it might a good idea to do the same here. What do you think? 8.3.10 Tables For simple tables, we can be manually insert values as such, +---------------+---------------+--------------------+ | Fruit | Price | Advantages | +===============+===============+====================+ | *Bananas* | $1.34 | - built-in wrapper | | | | - bright color | +---------------+---------------+--------------------+ | Oranges | $2.10 | - cures scurvy | | | | - **tasty** | +---------------+---------------+--------------------+ to produce… Fruit Price Advantages Bananas $1.34 built-in wrapper bright color Oranges $2.10 cures scurvy tasty Or we can use graphical user interfaces online. For more extensive tables, we create dataframe objects and project them using knitr::kable(), which we will explain later. 8.4 Render Output After you are done, run rmarkdown::render() or click the knit HTML button at the top of the RStudio scripts pane to save the output in your working directory. Click on the links below for more information on RMarkdown: RMarkdown Example File RStudio RMarkdown tutorial R-blogger’s RMarkdown tutorial "]
]
