[
["r-packages.html", "Chapter 8 R Packages 8.1 Step 1: Create an “empty” R package 8.2 Step 2: Remove “example” files 8.3 Step 3: Edit description file 8.4 Step 4: Move your script into R file in R folder 8.5 Step 5: Documentation 8.6 Step 6: Test your package 8.7 Step 7: Add a “README.Rmd” file", " Chapter 8 R Packages Suppose we have the following two function and that we would like to construct a package: mc_int = function(x_range, fun, B, seed = 1291){ # A few checks # Check x_range if (length(x_range) != 2 || x_range[1] &gt;= x_range[2]){ stop(&quot;x_range is incorrectly specified&quot;) } # Check fun if (class(fun) != &quot;character&quot;){ stop(&quot;fun is incorrectly specified and should be a character&quot;) } x = mean(x_range) test_fun = try(eval(parse(text = fun)), silent = TRUE) if (class(test_fun) == &quot;try-error&quot;){ stop(&quot;fun cannot be evaluated&quot;) } # Check B if (B &lt; 1){ error(&quot;B is incorrectly specified&quot;) } # Set seed set.seed(seed) # Compute the length of the interval, i.e. (b-a) interval_length = diff(x_range) # Let&#39;s draw some uniforms to get Ui and Xi Ui = runif(B) Xi = x_range[1] + Ui*interval_length # Compute \\hat{I} x = Xi I_hat = interval_length*mean(eval(parse(text = fun))) # Compute \\hat{I}_2 I2_hat = interval_length*mean((eval(parse(text = fun)))^2) var_I_hat = (interval_length*I2_hat - I_hat^2)/B # Output list out = list(I = I_hat, var = var_I_hat, fun = fun, x_range = x_range, B = B) class(out) = &quot;MCI&quot; out } plot.MCI = function(x, ...){ obj = x x_range = obj$x_range fun = obj$fun Delta = diff(x_range) x_range_graph = c(x_range[2] - 1.15*Delta, x_range[1] + 1.15*Delta) x = seq(from = x_range_graph[1], to = x_range_graph[2], length.out = 10^3) f_x = eval(parse(text = fun)) plot(NA, xlim = range(x), ylim = range(f_x), xlab = &quot;x&quot;, ylab = &quot;f(x)&quot;) grid() title(paste(&quot;Estimated integral: &quot;, round(obj$I,4), &quot; (&quot;, round(sqrt(obj$var),4),&quot;)&quot;, sep = &quot;&quot;)) lines(x, f_x) x = seq(from = x_range[1], to = x_range[2], length.out = 10^3) f_x = eval(parse(text = fun)) cols = hcl(h = seq(15, 375, length = 3), l = 65, c = 100, alpha = 0.4)[1:3] polygon(c(x, rev(x)), c(rep(0, length(x)), rev(f_x)), border = NA, col = cols[1]) abline(v = x_range[1], lty = 2) abline(v = x_range[2], lty = 2) } 8.1 Step 1: Create an “empty” R package 8.2 Step 2: Remove “example” files add image part2-1 Remove the following files: NAMESPACE hello.Rmd (man) hello.r (R) 8.3 Step 3: Edit description file Replace Authors by Authors@R Explain roles Add something on liscence 8.4 Step 4: Move your script into R file in R folder Group functions together per theme in different files Run each file seperately using source('~/demo/R/&lt;name of your file&gt;.R') and eventually debug if any error occurs. 8.5 Step 5: Documentation All function you want to be able to use MUST have #' @export Here is an example: #&#39; @title Simple Monte-Carlo integration #&#39; #&#39; @description Compute an approximation of the integral of the function f(x) #&#39; with respect to dx in the range [a, b] by Monte-Carlo integration using #&#39; uniform sampling. #&#39; @param x_range A \\code{vector} of dimension 2 used to denote the integration #&#39; region of interest, i.e. [a, b]. #&#39; @param fun A \\code{string} containing the function to integrated. It #&#39; is assumed that \\code{x} is used as the variable of interest. #&#39; @param B A \\code{numeric} (integer) used to denote the number of simulation. #&#39; @param seed A \\code{numeric} used to control the seed of the random number #&#39; generated by this function. #&#39; @return A \\code{list} containing the following attributes: #&#39; \\describe{ #&#39; \\item{I}{Estimated value of the integral} #&#39; \\item{var}{Estimated variance of the estimator} #&#39; } #&#39; @author Stephane Guerrier #&#39; @importFrom stats runif #&#39; @export #&#39; @examples #&#39; mc_int(x_range = c(0,1), fun = &quot;x^2&quot;, B = 10^5) #&#39; mc_int(x_range = c(0,1), fun = &quot;x^2*sin(x^2/pi)&quot;, B = 10^5) mc_int = function(x_range, fun, B, seed = 1291){ # A few checks # Check x_range if (length(x_range) != 2 || x_range[1] &gt;= x_range[2]){ stop(&quot;x_range is incorrectly specified&quot;) } # Check fun if (class(fun) != &quot;character&quot;){ stop(&quot;fun is incorrectly specified and should be a character&quot;) } x = mean(x_range) test_fun = try(eval(parse(text = fun)), silent = TRUE) if (class(test_fun) == &quot;try-error&quot;){ stop(&quot;fun cannot be evaluated&quot;) } # Check B if (B &lt; 1){ error(&quot;B is incorrectly specified&quot;) } # Set seed set.seed(seed) # Compute the length of the interval, i.e. (b-a) interval_length = diff(x_range) # Let&#39;s draw some uniforms to get Ui and Xi Ui = runif(B) Xi = x_range[1] + Ui*interval_length # Compute \\hat{I} x = Xi I_hat = interval_length*mean(eval(parse(text = fun))) # Compute \\hat{I}_2 I2_hat = interval_length*mean((eval(parse(text = fun)))^2) var_I_hat = (interval_length*I2_hat - I_hat^2)/B # Output list out = list(I = I_hat, var = var_I_hat, fun = fun, x_range = x_range, B = B) class(out) = &quot;MCI&quot; out } Build documentation : devtools::document() If everyhting is OK you should have one Rd document for everything function: part5-1 Check by using ?yourfunction 8.6 Step 6: Test your package Build your package - part6-1 Test if it works - by creating a “test” file in main and run everything it you change something major to the package to see if the behavious remains unchanged. -&gt; part6-2 8.7 Step 7: Add a “README.Rmd” file Showcase what your package is doing in this RMD file, you can add video, code example,…. --- output: github_document --- # Add a title Explain what your package is doing here Compile it with pkgdown (install: devtools::install_github(&quot;hadley/pkgdown&quot;)): pkgdown::build_site() Result should look like: part7 - 1 "]
]
