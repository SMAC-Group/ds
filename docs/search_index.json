[
["control.html", "Chapter 5 Control Flow 5.1 Introduction 5.2 Selection Operators", " Chapter 5 Control Flow 5.1 Introduction When you are building a larger program than the examples we considered previously, we need use various control structures to control the “flow” of our actions. Essentially, a control structure is “block” of code that analyzes variables and chooses a direction in which to go based on given parameters. These pieces of code represent the most basic decision-making process in computing. There exist essentially two kinds of control structures. The first ones allow to assess whether a given condition is satisfied and take appropriate in response. A simple analogy to our day to day life would be “if it raining outside then take an umbrella”, we will come back to this example later in this chapter. The second kind of control structures allow to repeat of a block code multiple times. For example such approach can be used to convert a color image to gray-scale by applying the same operation(s) (i.e. same code) to each pixel of the image. In this chapter, we will first discuss the two kind control structures previously mentioned and then present various example to build our intuition. 5.2 Selection Operators Suppose that we are interested in creating a simple code to check if it rained in last hour and this is the case to let us that we should probably take an umbrella today. To write such a code we essentially need three things: Find out how much it rained in the last hour at our location. Such information is now easily accessible through various websites and we can for example used the R package rwunderground to access this information. Note that you will need to create an account and request an API key before being able to use it (see package documentation for more details). Then, the precipitation amount (in inch) in the last hour can be retrieve using the code below: library(rwunderground) (rain &lt;- conditions(set_location(zip_code = &quot;16802&quot;), message = FALSE)$precip_1hr) ## [1] 0 Construct a logical (or boolean) variable created from the variable rain to assess whether or a umbrella is need. For example we could judged that there was any water in the last hour we should take an umbrella. This can be done as in the code below and in Section @ref(logical_operators) we will discuss how to construct logical variables in more details. (umbrella &lt;- rain &gt; 0) ## [1] FALSE Finally, we need to selection operator based on the logical variable constructed in the previous step to bring everything together. For example, we could the if/else statement presented below. This simple code will print “You should probably take an umbrella” is the logical variable umbrella is TRUE and print “An umbrella is probably not necessary”, otherwise. if (umbrella){ print(&quot;You should probably take an umbrella&quot;) }else{ print(&quot;An umbrella is probably not necessary&quot;) } ## [1] &quot;An umbrella is probably not necessary&quot; 5.2.1 Logical Operators Logical operators are used very commonly across all platforms. Command Description x &gt; y x greater than y x &gt;= y x greater or equals to y x &lt; y x less than y x &lt;= y x less than or equals to y x == y x equal to y x != y x not equal to y !x Not x x |y x or y x &amp; y x and y isTRUE(x) test if all of x is TRUE Logical operators can be applied to vectors as well. For example, here we create two random numerical vectors and compare them. x = c(3,6,3,4,5) y = c(2,3,4,5,6) x&gt;y ## [1] TRUE TRUE FALSE FALSE FALSE This method outputs a vector of boolean TRUE and FALSE values that perform element-wise comparisons. Note, this is called a vectorized method, which we will further mention in some detail later. isTRUE() checks if all the elements within the object is TRUE. isTRUE(TRUE) ## [1] TRUE isTRUE(x&gt;y) ## [1] FALSE "]
]
