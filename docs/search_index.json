[
["index.html", "An Introduction to Statistical Programming Methods with R Chapter 1 Introduction 1.1 R and RStudio 1.2 Basic Probability and Statistics with R 1.3 Main References 1.4 License", " An Introduction to Statistical Programming Methods with R Matthew Beckman, Stéphane Guerrier, Justin Lee &amp; Roberto Molinari 2017-08-22 Chapter 1 Introduction This book is currently under development and has been designed as a support for students who are following (or are interested in) courses that provide the basic knowledge to master “statistical programming” with R. By the latter we mean that area of computer programming which focuses on the implementation of methods that not only manage data but also extract meaningful information from it. The importance of this area of research comes from the increased collection of data from different sources such as academic research, public institutions and private companies that has required a corresponding increase in data management and analysis tools. Consequently, the need to develop applications and methods that are able to deliver these tools has led to a surge in the demand for expertise not only in computer programming but also in statistical and numerical analysis. Indeed, while it is essential to master the basics of programming to build the necessary software, it is now also paramount to understand the programming tools that can effectively respond to the need of finding, extracting, and analyzing the information to achieve the required goals. Within the above framework, the statistical software R has seen a rise in use due to its flexibility as an efficient language that builds a bridge between software development and data analysis. There are of course many other programming languages that have different advantages over R but, as you will see, one strength of R is the facility to develop and quickly adapt to the different needs coming from the data management and analysis community while at the same time making use of other languages in order to deliver computationally efficient solutions (as well as other interesting features described below). This book intends to present the basic tools to statistical programming and software development using the wide variety of tools made available through R, from method-specific packages to version control programs. The general goals of the book are therefore the following: understand data structures in order to appropriately manage data, computer memory and computations; manipulate data structures through controls, instructions, and tailored functions in order to achieve a desired output; create new software tools (packages and web applications) that accommodate a previously unmet need; learn how to manage software development via version control tools (e.g., GitHub) and create documentation for this software (with embedded code) to allow others to make use of the software. All these goals are common to any basic programming course, however all these will be heavily focused on the use and development of statistical tools. In fact, as highlighted earlier, it has become increasingly important to include statistical methodologies within the programming framework thereby allowing software to not only manage data efficiently but also to extract and analyse data in an appropriate manner while doing so. The rest of this introductory chapter will present the R software by explaining why it is used for this book and describing the basic notations and tools that need to be known in order to better grasp its contents. This document is under development and it is therefore preferable to always access the text online to be sure you are using the most up-to-date version. Due to its current development, you may encounter errors ranging from broken code to typos or poorly explained topics. If you do, please let us know! Simply add an issue to the GitHub repository used for this document (which can be accessed here https://github.com/SMAC-Group/ds/issues) and we will make the changes as soon as possible. In addition, if you know RMarkdown and are familiar with GitHub, make a pull request and fix an issue yourself, otherwise, if you’re not familiar with these tools, they will be explained later on in the book itself. 1.1 R and RStudio The statistical computing language R has become commonplace for many applications in industry, government, and academia. Having started as an open-source language to make available different statistics and analytical tools to researchers and the public, it steadily developed into one of the major software languages which not only allows to develop up-to-date, sound, and flexible analytical tools, but also to include these tools within a framework which is well-integrated with other important programming languages, communication, and version-control features. The latter is also possible thanks to the development of the RStudio interface which provides a pleasant and functional user-interface for R as well as an efficient Integrated Development Environment (IDE) in which different programming languages, web-applications and other important tools are available to the user. In order to illustrate the relationship between R &amp; RStudio in statistical programming, one might think of a car analogy in which R would be like the engine and RStudio might be like leather seats. R is doing the work (for the most part), and RStudio generally is making you more comfortable while you use R. 1.1.1 Why R? There are many reasons to use R. Two compelling reasons are that R is both free as in “free pizza”, and free as in “free speech”). Free–like “free pizza”–means that there is never a need to pay for any part of the R software, or contributed packages (i.e. add-on modules). Free–like “free speech”–means that there are very few restrictions on how R can be used or barriers to those who would like to contribute packages (i.e. add-on modules). The fact that is a free and open-source software which per se does not necessarily imply that it is a good software (although it is also that). The reason why this is an important feature consists in the fact that the results of any code or program developed in the R environment can easily be replicated therefore ensuring accessibility and transparency for the general user. More importantly however, this replicability of results is also accompanied by a wide variety of packages that are made available through the R environment in which users can find a diversity of codes, functions and features that are designed to tackle a large amount of programming and analytical tasks. Moreover, these packages are relatively simple to create and are extremely useful for code-sharing purposes since they enclose the codes, functions and external dependencies that allow anyone to install any of these features all at once in easy and efficient manner. In addition to its accessibility and code-sharing features, R has acquired visibility and importance mainly due to the cutting-edge tools that it makes available to the general user. Indeed, a growing area of research both in academia and in industry is Statistics and Machine Learning through which it is possible to find, extract and make an efficient use of the increasing amount of data and information being collected. All the latest methods and approaches going from data-mining techniques to predictive analysis are available in R and, due to its nature, all future methods and approaches will be made available to all users through R. For this reason, any individual, company or organization has a keen interest in acquiring and developing expertise in R since it makes available the most appropriate tools for any data-based analysis and decision-making process. Like any other software, there are of course some drawbacks with using R. First, the presence of an extended amount of user-contributed packages can make its usage and bug-reporting problematic. Although this does not represent a major problem since many forums exist and solutions are usually quickly fixed, there can be many issues concerning package updates or deletions that can create problems for other existing packages that depend on them. This is fairly rare, but there can consequently be problems in the use of packages that become obsolete and need to be fixed due to dependency issues. Another drawback consists in the extensive use of computer memory that R entails through its commands which generally give little relevance to this issue. However, many different solutions are being developed which deal with this problem along with the increased memory made available by current operating systems. In the perspective of improving the usage of computer memory, R has been developing efficient and “seemless” connections with high-performance languages which allow functions and packages to make use of them thereby greatly lightening and accelerating computations made through R. An important example of this is given by the connections made available to the C++ language. In this book we will discuss the connections with this language that are particularly well implemented, but other high-performance languages can be used such as C and FORTRAN. 1.1.2 Getting started with R As mentioned earlier, R can be thought of as a programming language as well as a software environment for statistical programming. Since it is a free and open-source software, all you will need to do is to download it from the following link: R Once you’ve downloaded and installed R on your computer you will be able to start using the programming language and packages that the R environment provides. Nevertheless, to make full use of the latest developments and features of this software, in this book we recommend using the IDE called RStudio which can be downloaded from the following link: RStudio You cannot use RStudio without having installed R on your computer. 1.1.3 About RStudio RStudio is a customizable IDE for the R enviornment where the user can have easy access to plots, data, help, files, objects and many other features that are useful to work efficiently with R. For the most part, RStudio provides everything the R user will need in a self-contained, and well-organized environment. Moreover, it is possible to create “projects” in which it is possible to create a dedicated environment space for sets of specific functions and files aimed to deal with various tasks. In addition, RStudio provides embedded functionality to utilize collaborative version-control software including GitHub &amp; Subversion as well as a set of powerful tools to save and communicate results (whether they be simulations, data analysis, or presenting and making available a new package to other users). Some examples of these tools are Rmarkdown which can be used respectively to integrate written narrative with embedded R code and other content, as well as and Shiny Web Apps which can provide an interactive user-friendly interface that permits a user to actively engage with a wide variety of tools built in R without the need to encounter raw R code. GitHub and Rmarkdown will be the object of a more in-depth description in the first chapters of this book in order to provide the reader with the version-control and annotation tools that can be useful for the following chapters of this book. 1.1.4 Conventions Throughout this book, R code will be typeset using a monospace font which is syntax highlighted. For example: a = pi b = 0.5 sin(a*b) Similarly, R output lines (that usally appear in your Console) will begin with ## and will not be syntax highlighted. The output of the above example is the following: ## [1] 1 Aside from R code and its outputs, this book will also insert some boxes that will draw the reader’s attention to important, curious, or otherwise informative details. An example of these boxes was seen at the beginning of this introduction where an important aspect was pointed out to the reader regarding the “under construction” nature of this book. Therefore the following boxes and symbols can be used to represent information of different nature: This is an important piece of information. This is some additional information that could be useful to the reader. This is something that the reader should pay caution to but should not create major problems if not considered. This is a warning which should be heeded by the reader to avoid problems of different nature. This is a tip for the reader when following or developing something based on this book. 1.1.5 Simple calculations A basic aspect to underline about the R environment is that it serves as an advanced calculator which therefore allows also for simple calculations. In the table below we show a few examples of such calculations where the first column gives a mathematical expression (calculation), the second gives the equivalent of this expression in R and finally in the third column we can find the result that is output from R. Math. R Result 2+2 2+2 4 \\(\\frac{4}{2}\\) 4/2 2 \\(3 \\cdot 2^{-0.8}\\) 3*2^(-0.8) 1.723048 \\(\\sqrt{2}\\) sqrt(2) 1.414214 \\(\\pi\\) pi 3.141593 \\(\\ln(2)\\) log(2) 0.6931472 \\(\\log_{3}(9)\\) log(9, base = 3) 2 \\(e^{1.1}\\) exp(1.1) 3.004166 \\(\\cos(\\sqrt{0.9})\\) cos(sqrt(0.9)) 0.5827536 1.1.6 Getting help In the previous section we presented some examples on how R can be used as a calculator and we have already seen several functions such as sqrt() or log(). To obtain documentation about a function in R, simply put a question mark in front of the function name (or just type help() around the function name), or use the search bar on the “Help” tab in your RStudio window, and its documentation will be displayed. For example, if you are interested in learning about the function log() you could simply type: ?log which will display something similar to: The R documentation is written by the author of the package. For mainstream packages in widespread use, the documentation is almost always quite good, but in some cases it can be quite technical, difficult to interpret, and possibly incomplete. In these cases, the best solution to understand a function is to search for help on any search engine. Often a simple search like “side by side boxplots in R” or “side by side boxplots in ggplot2” will produce many useful results. The search results often include user forums such as “CrossValidated” or “StackExchange” in which the questions you have about a function have probably already been asked and answered by many other users. You can often use the error message to search for answers about a problem you may have with a function. 1.1.7 Installing packages R comes with a number of built-in functions but one of its main strengths is that there is a large number of packages on an ever-increasing range of subjects available for you to install. These packages provide additional functions, features and data to the R environement. If you want to do something in R that is not available by default, there is a good chance that there are packages that will respond to your needs. In this case, an appropriate way to find a package in R is to use the search option in the CRAN repository which is the official network of file-transfer protocols and web-servers that store updated versions of code and documentation for R (see CRAN website). Another general approach to find a package in R is simply to use a search engine in which to type the keywords of the tools you are looking for followed by “R package”. R packages can be installed in various ways but the most widely used approach is through the install.packages() function. Another way is to use the “Tools -&gt; Install Packages…” path from the dropdown menus in RStudio or clicking on the “install” button in the “Packages” pane in the RStudio environment. The install.packages() function is very straight-forward and transcends any platform for the R environment. It is noteworthy that this approach assumes that the desired package(s) are available within the CRAN repository. This is very often the case, but there is a growing number of packages that are under-development or completed and are made available through other repositories. In the latter setting, Chapter 02 will show other ways of installing packages from a commonly used repository called “GitHub”. Sticking momentarily to the packages available in the CRAN repository, the use of the install.packages() is quite simple. For example, if you want to install the package devtools you can simply write: install.packages(&quot;devtools&quot;) Once a package is installed it is not directly usable within your R session. To do so you will have to “load” the package into your current R session which is generally done through the function library(). For example, after having installed the devtools package, in order to use it within your session you would write: library(devtools) Once this is done, all the functions and documentation of this package are available and can be used within your current session. However, once you close your R session, all loaded packages will be closed and you will have to load them again if you want to use them in a new R session. Please notice that although packages need to be loaded at each session if you want to use them, they need to be installed only once. The only exception to this rule is when you need to update the package or reinstall it for some reason. One of the main packages that is required for this class would be our STAT 297 package, that contains all the necessary packages and functions that will be utilized in this course. Run the following code to install the package directly from GitHub. install_github(&quot;SMAC-Group/stat297&quot;) 1.1.8 Additional References There are many more elements in RStudio, and we encourage you to use the RStudio Cheatsheet as a reference. 1.2 Basic Probability and Statistics with R The R environment provides an up-to-date and efficient programming language to develop different tools and applications. Nevertheless, its main functionality lies in the core statistical framework and tools that consistute the basis of this language. Indeed, this book aims at introducing and describing the methods and approaches of statistical programming which therefore require a basic knowledge of Probability and Statistics in order to grasp the logic and usefulness of the features presented in this book. For this reason, we will briefly take the reader through some of the basic functions that are available within R to obtain probabilities based on parametric distributions, compute summary statistics and understand basic data structures. The latter is just an introduction and a more in-depth description of different data structures will be given in a future chapter. 1.2.1 Probability Distributions Probability distributions can be uniquely characterized by different functions such as, for example, their density or distribution functions. Based on these it is possible to compute theoretical quantiles and also randomly sample observations from them. Replacing the R syntax for a given probability distribution with the general syntax name, all these functions and calculations are made available in R through the built-in functions: dname calculates the value of the density function (pdf); pname calculates the value of the distribution function (cdf); qname calculates the value of the theoretical quantile; rname generates a random sample from a particular distribution. Note that, when using these functions in practice, name is replaced with the syntax used in R to denote a specific probability distribution. For example, if we wish to deal with a Uniform probability distribution, then the syntax name is replaced by unif and, furthering the example, to randomly generate observations from a uniform distribution the function to use will be therefore runif. R allows to make use of these functions for a wide variety of probability distributions that include, but are not limited to: Gaussian (or Normal), Binomial, Chi-square, Exponential, F-distribution, Geometric, Poisson, Student-t and Uniform. In order to get an idea of how these functions can be used, below is an example of a problem that can be solved using them. 1.2.1.1 Example: Normal Test Scores of College Entrance Exam Assume that the test scores of a college entrance exam follows a Normal distribution. Furthermore, suppose that the mean test score is 70 and that the standard deviation is 15. How would we find the percentage of students scoring 90 or more in this exam? In this case, we consider a random variable \\(X\\) that is normally distributed as follows: \\(X \\sim N(\\mu=70, \\sigma^2=225)\\) where \\(\\mu\\) and \\(\\sigma^2\\) represent the mean and variance of the distribution respectively. Since we are looking for the probability of students scoring higher than 90, we are interested in finding \\(\\mathbb{P}(X &gt; x=90)\\) and therefore we look at the upper tail of the Normal distribution. To find this probability we need the distribution function (pname) for which we therefore replace name with the R syntax for the Normal distribution: norm. The distribution function in R has various parameters to be specified in order to compute a probability which, at least for the Normal distribution, can be found by typing ?pnorm in the Console and are: q: the quantile we are interested in (e.g. 90); mean: the mean of the distribution (e.g. 70); sd: the standard deviation of the distribution (e.g. 15); lower.tail: a boolean determining whether to compute the probability of being smaller than the given quantile (i.e. \\(\\mathbb{P}(X \\leq x)\\)) which requires the default argument TRUE or larger (i.e. \\(\\mathbb{P}(X &gt; x)\\)) which requires to specify the argument FALSE. Knowing these arguments, it is now possible to compute the probability we are interested in as follows: pnorm(q = 90, mean = 70, sd = 15, lower.tail = FALSE) ## [1] 0.09121122 As we can see from the output, there is roughly a 9% probability of students scoring 90 or more on the exam. 1.2.2 Summary Statistics While the previous functions deal with theoretical distributions, it is also necessary to deal with real data from which we would like to extract information. Supposing–as is often the case in applied statistics–we don’t know from which distribution it is generated, we would be interested in understanding the behavior of the data in order to eventually identify a distribution and estimate its parameters. The use of certain functions varies according to the nature of the inputs since these can be, for example, numerical or factors. 1.2.2.1 Numerical Input A first step in analysing numerical inputs is given by computing summary statistics of the data which, in this section, we can generally denote as x (we will discuss the structure of this data more in detail in the following chapters). For central tendency or spread statistics of a numerical input, we can use the following R built-in functions: mean calculates the mean of an input x; median calculates the median of an input x; var calculates the variance of an input x; sd calculates the standard deviation of an input x; IQR calculates the interquartile range of an input x; min calculates the minimum value of an input x; max calculates the maximum value of an input x; range returns a vector containing the minimum and maximum of all given arguments; summary returns a vector containing a mixture of the above functions (i.e. mean, median, first and third quartile, minimum, maximum). 1.2.2.2 Factor Input If the data of interest is a factor with different categories or levels, then different summaries are more appropriate. For example, for a factor input we can extract counts and percentages to summarize the variable by using table. Using functions and data structures that will be described in the following chapters, below we create an example dataset with 90 observations of three different colors: 20 being Yellow, 10 being Green and 50 being Blue. We then apply the table function to it: table(as.factor(c(rep(&quot;Yellow&quot;, 20), rep(&quot;Green&quot;, 10), rep(&quot;Blue&quot;, 50)))) ## ## Blue Green Yellow ## 50 10 20 By doing so we obtain a frequency (count) table of the colors. 1.2.2.3 Dataset Inputs In many cases, when dealing with data we are actually dealing with datasets (see Chapter 03) where variables of different nature are aligned together (usually in columns). For datasets there is another convenient way to get simple summary statistics which consists in applying the function summary to the dataset itself (instead of simply a numerical input as seen earlier). As an example, let us explore the Iris flower dataset contained in the R built-in datasets package. The data set consists of 50 samples from each of three species of Iris (Setosa, Virginica and Versicolor). Four features were measured from each sample consisting in the length and the width (in centimeters) of the both sepals and petals. This dataset is widely used as an example since it was used by Fisher to develop a linear discriminant model based on which he intended to distinguish the three species from each other using combinations of these four features. Using this dataset, let us use the summary function on it to output the minimum, first quartile and thrid quartile, median, mean and maximum statistics (for the numerical variables in the dataset) and frequency counts (for factor inputs). summary(iris) ## Sepal.Length Sepal.Width Petal.Length Petal.Width ## Min. :4.300 Min. :2.000 Min. :1.000 Min. :0.100 ## 1st Qu.:5.100 1st Qu.:2.800 1st Qu.:1.600 1st Qu.:0.300 ## Median :5.800 Median :3.000 Median :4.350 Median :1.300 ## Mean :5.843 Mean :3.057 Mean :3.758 Mean :1.199 ## 3rd Qu.:6.400 3rd Qu.:3.300 3rd Qu.:5.100 3rd Qu.:1.800 ## Max. :7.900 Max. :4.400 Max. :6.900 Max. :2.500 ## Species ## setosa :50 ## versicolor:50 ## virginica :50 ## ## ## 1.3 Main References This is not the first (or the last) book that has been written explaining and describing statistical programming in R. Indeed, this can be seen as a book that brings together and reorganizes information and material from other sources structuring and tailoring it to a course in basic statistical programming. The main references (which are far from being an exhaustive review of literature) that can be used to have a more in-depth view of different aspects treated in this book are: Wickham (2014) : a more technical and advanced introduction to R; Wickham (2015) : basic building blocks of building packages in R; Xie (2015) : an overview of document generation in R; 1.4 License You can redistribute it and/or modify this book under the terms of the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC BY-NC-SA) 4.0 License. References "],
["rmarkdown.html", "Chapter 2 RMarkdown 2.1 Create an R Markdown file in RStudio 2.2 YAML Metadata 2.3 Text 2.4 Code Chunks 2.5 Render Output 2.6 Main References", " Chapter 2 RMarkdown RMarkdown is a framework that provides a literate programming format for data science. It can be used to save and execute R code within RStudio and also as a simple formatting syntax for authoring HTML, PDF, ODT, RTF, and MS Word documents as well as seamless transitions between available formats. The name “markdown” is an intentional contrast to other “markup” languages–e.g., hypertext markup language (HTML)–which require syntax that can be quite difficult to decipher for the uninitiated. One aim of the markdown paradigm is a syntax that is as human-readable as possible. “RMarkdown” is an implementation of the “markdown” language designed to accommodate embedded R code. What is literate programming? Literate programming is the notion for programmers of adding narrative context with code to produce documentation for the program simultaneously. Consequently, it is possible to read through the code with explanations so that any viewer can follow through the presentation. RMarkdown offers a simple tool that allows to create reports or presentation slides in a reproducible manner with collateral advantages such as avoiding repetitive tasks by, for example, changing all figures when data are updated. What is reproducible research? Reproducible research or reproducible analysis is the notion that an experiment’s whole process, including collecting data, performing analysis and producing output can be reproduced the same way by someone else. Building non-reproducible experiments has been a problem both in research and in the industry, and having such an issue highly decreases the credibility of the authors’ findings and, potentially, the authors themselves. In essence, allowing for reproducible research implies that anyone could run the code (knit the document, etc.) and obtain the same exact results as the original research and RMarkdown is commonly used to address this issue. We’ve created a framework application that you can use to test out different R Markdown functions. 2.1 Create an R Markdown file in RStudio Within RStudio, click File → New File → R Markdown. Give the file a title and the author (your name) and select the default output, HTML. We can change this later so don’t worry about it for the moment. An RMarkdown is a plain text file that contains three different aspects: YAML metadata Text Code Chunks 2.2 YAML Metadata YAML stands for YAML Ain’t Markup Language and is used to specify document configurations and properties such as name, date, output format, etc. The (optional) YAML header is surrounded before and after by “—” on a dedicated line. You can also include additional formatting options such as a table of contents or even a custom CSS style template which can be used to further enhance the presentation. For the purpose of this book, the default options should be sufficient. Below is an example knit output of the above RMarkdown file. The default output above is an html_document format but this format can be modified using, for example, pdf_document to output a pdf. However, the pdf format requires additional installation and configuration of a TeX distribution such as MikTeX. Once available, the user can also include raw LaTeX and even define LaTeX macros in the RMarkdown document if necessary (we’ll discuss more about LaTeX further on). 2.2.1 Subsections To make your sections numbered as sections and subsections, make sure you specify number_sections: yes as part of the YAML Metadata as shown below. 2.3 Text Due to its literate nature, text will be an essential part in explaining your analysis. With RMarkdown, we can specify custom text formatting with emphases such as italics, bold, or code style. To understand how to format text, our previous sentence would be typed out as follows in RMarkdown: With RMarkdown, we can specify custom text formatting with emphases such as *italics*, **bold**, or `code style 2.3.1 Headers As seen above, headers are preceded by a #. A single # produces the largest heading text while, to produce smaller headings, you simply need to add more #s! Heading level also impacts section and subsection nesting in documents and tables of contents, as well as slide breaks in presentation formats. 2.3.2 Lists Lists can be extremely convenient to make text more readable or to take course notes during class. RMarkdown allows to create different list structures as shown in the code below: * You can create bullet points by using symbols such as *, +, or -. + simply add an indent or four preceding spaces to indent a list. + You can manipulate the number of spaces or indents to your liking. - Like this. * Here we go back to the first indent. 1. To make the list ordered, use numbers. 1. We can use one again to continue our ordered list. 2. Or we can add the next consecutive number. which delivers the following list structure: You can create bullet points by using symbols such as *, +, or -. simply add an indent or four preceding spaces to indent a list. You can manipulate the number of spaces or indents to your liking. Like this. Here we go back to the first indent. To make the list ordered, use numbers. We can use one again to continue our ordered list. Or we can add the next consecutive number. 2.3.3 Hyperlinks To add hyperlinks with the full link, (ex: https://google.com/) you can follow the syntax below: &lt;https://google.com/&gt; whereas to add hyperlinks with a custom link title, (ex: Google) follow the syntax below: [Google](https://google.com) 2.3.4 Blockquotes Use the &gt; character in front of a line, just like in email to produce blockquotes which styles the text in a way to use if we quote a person, a song or another entity. “To grow taller, you should shave your head. Remember to bring the towels!” Justin Lee 2.3.5 Pictures To add a picture with captions, follow the syntax below: ![Eberly College of Science Banner](http://science.psu.edu/psu_eberly_blue.png) which will produce: Otherwise, to add a picture without any captions, follow the syntax below: ![](http://www.alumni.psu.edu/s/1218/16/images/logo.png) which delivers: 2.3.6 LaTeX LaTeX is a document preparation system that uses plain text as opposed to formatted text that is used for applications such as Microsoft Word. It is widely used in academia as a standard for the publication of scientific documents. It has control over large documents containing sectioning, cross-references, tables and figures. 2.3.6.1 LaTeX in RMarkdown Unlike a highly formatted word processor, we cannot produce equations by clicking on symbols. As data scientists there is often the need to explain distributions and equations that are behind the methods we present. Within the text section of an RMarkdown document you can include LaTeX format text to output different forms of text, mainly equations and mathematical expressions. Inline mathematical expressions can be added using the syntax: $math expression$. For example, if we want to write “where \\(\\alpha\\) is in degrees” we would write: &quot;where $\\alpha$ is in degrees&quot;. Using a slightly different syntax (i.e. $$math expression$$) we can obtain centered mathematical expressions. For example, the binomial probability distribution in LaTeX is written as $$f(y|N,p) = \\frac{N!}{y!(N-y)!}\\cdot p^y \\cdot (1-p)^{N-y} = {{N}\\choose{y}} \\cdot p^y \\cdot (1-p)^{N-y}$$ which is output as: \\[f(y|N,p) = \\frac{N!}{y!(N-y)!}\\cdot p^y \\cdot (1-p)^{N-y} = {{N}\\choose{y}} \\cdot p^y \\cdot (1-p)^{N-y}\\] An introduction to the LaTeX format can be found here if you want to learn more about the basics. An alternative can be to insert custom LaTeX formulas using a graphical interface such as codecogs. 2.3.7 Cross-referencing Sections You can also use the same syntax \\@ref(label) to reference sections, where label is the section identifier (ID). By default, Pandoc will generate IDs for all section headers, e.g., # Hello World will have an ID hello-world. To call header hello-world as a header, we type \\@ref(hello-world) to cross-reference the section. In order to avoid forgetting to update the reference label after you change the section header, you may also manually assign an ID to a section header by appending {#id} to it. 2.3.8 Citations and Bibliography Citations and bibliographies can automatically be generated with RMarkdown. In order to use this feature we first need to create a “BibTex” database which is a simple plain text file (with the extension “.bib”) where each reference you would like to cite is entered in a specific manner. To illustrate how this is done, let us take the example of a recent paper where two researchers from Oxford University investigated the connection between the taste of food and various features of cutlery such as weight and color (calling this phenomenon the “taste of cutlery”). The BibTeX “entry” for this paper is given below: @article{harrar2013taste, title={The taste of cutlery: how the taste of food is affected by the weight, size, shape, and colour of the cutlery used to eat it}, author={Harrar, Vanessa and Spence, Charles}, journal={Flavour}, volume={2}, number={1}, pages={21}, year={2013}, publisher={BioMed Central} } This may look like a complicated format to save a reference but there is an easy way to obtain this format without having to manually fill in the different slots. To do so, go online and search for “Google Scholar” which is a search engine specifically dedicated to academic or other types of publications. In the latter search engine you can insert keywords or the title and/or authors of the publication you are interested in and find it in the list of results. In our example we search for “The taste of cutlery” and the publication we are interested in is the first in the results list. Below every publication in the list there is a set of options among which the one we are interested in is the “Cite” option that should open a window in which a series of reference options are available. Aside from different reference formats that can be copied and pasted into your document, at the bottom of the window you can find another set of options (with related links) that refer to different bibliography managers. For “.bib” files we are interested in the “BibTeX” option and by clicking on it we will be taken to another tab in which the format of the reference we want is provided. All that needs to be done at this point is to copy this format (that we saw earlier in this section) and paste in the “.bib” file you created and save the changes. However, your RMarkdown document does not know about the existence of this bibliography file and therefore we need to insert this information in the YAML metadata at the start of our document. To do so, let us suppose that you named this file “biblio.bib” (saved in the same location as your RMarkdown document). All that needs to be done is to add another line in the YAML metadata with bibliography: biblio.bib and your RMarkdown will now be able to recognize the references within your “.bib” file. There are also a series of other options that can be specified for the bibliography such as its format or the way references can be used within the text (see links at the end of this section). Once the “.bib” file has been created and has been linked to your RMarkdown document through the details in the YAML metadata, you can now start using the references you have collected in the “.bib” file. To insert these references within your document at any point of your text you need to use the name that starts the reference field in your “.bib” file and place it immediately after the @ symbol (without spaces). So, for example, say that we wanted to cite the publication on the “taste of cutlery”: in your RMarkdown all you have to do is to type @harrar2013taste at the point where you want this citation in the text and you will obtain: Harrar and Spence (2013). The user can also change the name that is used to call the desired reference as long as the same name is used to cite it in the RMarkdown document and that this name is not the same as another reference. The references in the “.bib” file will not appear in the references that are output from the RMarkdown compiling procedure unless they are specifically used within the RMarkdown document. Additional information on BibTeX and reference in RMarkdown can be found in the links below: Introduction to bibtex Reference in RMarkdown 2.3.9 Tables For simple tables, we can be manually insert values as such follows: +---------------+---------------+--------------------+ | Fruit | Price | Advantages | +===============+===============+====================+ | *Bananas* | $1.34 | - built-in wrapper | | | | - bright color | +---------------+---------------+--------------------+ | Oranges | $2.10 | - cures scurvy | | | | - **tasty** | +---------------+---------------+--------------------+ to produce: Fruit Price Advantages Bananas $1.34 built-in wrapper bright color Oranges $2.10 cures scurvy tasty As an alternative we can use the simple graphical user interface online. For more extensive tables, we create dataframe objects and project them using knitr::kable() which we will explain later on this book. 2.3.10 Additional References There are many more elements to creating a useful report using RMarkdown, and we encourage you to use the RMarkdown Cheatsheet as a reference. 2.4 Code Chunks Code chunks are those parts of the RMarkdown document where it is possible to embed R code within your output. To insert these chunks within your RMarkdown file you can use the following shortcuts: the keyboard shortcut Ctrl + Alt + I (OS X: Cmd + Option + I) the Add Chunk command in the editor toolbar by typing the chunk delimiters ```{} and ```. The following example highlights the code chunks in the example RMarkdown document we saw at the start of this chapter: 2.4.1 Code Chunk Options A variety of options can be specified to manage the code chunks contained in the document. For example, as can be seen in the third code chunk in the example above, we specify an argument that reads echo = FALSE which is a parameter that was added to the code chunk to prevent printing the R code that generated the plot. This is a useful way to embed figures. More options can be found from the RMarkdown Cheatsheet and Yihui’s notes on knitr options. Here are some explanations of the most commonly used chunk options taken from these references: eval: (TRUE; logical) whether to evaluate the code chunk; echo: (TRUE; logical or numeric) whether to include R source code in the output file; warning: (TRUE; logical) whether to preserve warnings (produced by warning()) in the output like we run R code in a terminal (if FALSE, all warnings will be printed in the console instead of the output document); cache: (FALSE; logical) whether to “cache” a code chunk. This option is particularly important in practice and is discussed in more details in Section 2.4.4. Plot figure options: fig.path: (‘figure/’; character) prefix to be used for figure filenames (fig.path and chunk labels are concatenated to make filenames); fig.show: (‘asis’; character) how to show/arrange the plots; fig.width, fig.height: (both are 7; numeric) width and height of the plot, to be used in the graphics device (in inches) and have to be numeric; fig.align: (‘default’; character) alignment of figures in the output document (possible values are left, right and center; fig.cap: (NULL; character) figure caption to be used in a figure environment. 2.4.2 Comments Adding comments to describe the code is extremely useful (if not essential) during every coding and programming process. It helps you take notes and remember what is going on and why you made use of these functions, as well as helping others understand your code. Forgetting to comment or document your code often becomes a larger problem in the future when, among numerous lines of code, you have forgotten the reason for using certain functions or algorithms. “Don’t document bad code – rewrite it.” The Elements of Programming Style, Kernighan &amp; Plauger # Comment your code by preceding text with a # # Keep it brief but comprehensible, so you can return to it 2.4.3 In-line R The variables we store in an RMarkdown document will stay within the environment they were created in. This means that we can call and manipulate them anywhere within the document. For example, supposing we have a variable called x to which we assign a specific value, then in RMarkdown we can reference this variable by using r x: this will affix the value of the variable directly in a sentence. Here is a practical example: a = 2 where we have stored the value 2 in a variable called a. We can use the value of a as follows: The value of $a$ is `r a`. This translates in R Markdown to “The value of \\(a\\) is 2.” 2.4.4 Cache Depending on the complexity of calculations in your embedded R code, it may be convenient to avoid re-running the computations (which could be lengthy) each time you knit the document together. For this purpose, it possible to specify an additional argument for your embedded R code which is the cache argument. By default this argument is assigned the value FALSE and therefore the R code is run every time your document is compiled. However, if you specify this argument as cache = TRUE, then the code is only run the first time the document is compiled while the following times it simply stores and presents the results of the computations when the document was first compiled. Let us consider an example where we want to embed an R code with a very simple operation such as assigning the value of 2 to an object that we call a (that we saw earlier). This is clearly not the best example since this operation runs extremely quickly and there is no visible loss in document compilation time. However, we will use it just to highlight how the cache argument works. Therefore, if we want to avoid running this operation each time the document is compiled, then we just embed our R code as follows: a = 2 which would be written in RMarkdown as: ```{r computeA, cache = TRUE} a = 2 ``` You will notice that we called this chunk of embedded R code computeA and the reason for this will become apparent further on. Once we have done this we can compile the document that will run this operation and store its result. Now, if we compile the document again (independently from whether we made changes to the rest of the document or not) this operation will not be run and the result of the previous (first) compiling will be presented. However, if changes are made to the R code which has been “cached”, then the code will be run again and this time its new result will be stored for all the following compilings until it is changed again. This argument can therefore be very useful when computationally intensive R code is embedded within your document. Nevertheless it can suffer from a drawback which consists in dependencies of your “cached” R code with other chunks within the document. In this case, the other chunks of R code can be modified thereby outputting different results but these will not be considered by your “cached” R code. As an example, suppose we have another chunk of R code that we can “cache” and that takes the value of a from the previous chunk: (d = 2*a) ## [1] 4 which would be written in RMarkdown as: ```{r, cache = TRUE} (d = 2*a) ``` In this case, the output of this chunk will be ## 4 since a = 2 (from the previous chunk). What happens however if we modify the value of a in the previous chunk? In this case, the previous chunk will be recomputed but the value of d (in the following chunk) will not be updated since it has stored the value of 4 and it is not recomputed since this chunk has not been modified. To avoid this, a solution is to specify the chunks of code that the “cached” code depends on. This is why we initially gave a name to the first chunk of code (“computeA”) so as to refer to it in following chunks of “cached” code that depend on it. To refer to this code you need to use the option dependson as follows: (d = 2*a) ## [1] 4 which we would write as: ```{r, cache = TRUE, dependson = &quot;computeA&quot;} (d = 2*a) ``` In this manner, if the value of a changes in the first chunk, the value of d will also change but will be stored until either the computeA chunk or the latter chunk is modified. 2.5 Render Output After you are done, run RMarkdown::render() or click the Knit button at the top of the RStudio scripts pane to save the output in your working directory. The use of RMarkdown makes it possible to generate any file format such as HTML, pdf and Word processor formats using pandoc. Pandoc is a free software that understands and converts useful markdown syntax, such as the code mentioned above, into a readable and clean format. 2.6 Main References Click on the links below for more information on RMarkdown: RStudio RMarkdown tutorial R-blogger’s RMarkdown tutorial RMarkdown Cheatsheet "]
]
